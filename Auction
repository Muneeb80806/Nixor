import tensorflow as tf
tf.keras.backend.clear_session()

team_name = "jawdroppers"
budget = 14000

from google.colab import drive

drive.mount(r'/content/drive')

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_dir = r"/content/drive/MyDrive/Dataset/TRAINING"
test_dir = r"/content/drive/MyDrive/Dataset/TESTING"

train_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1./255)

import random

width_range = (280, 350)
height_range = (200, 320)

# Generate random dimensions
random_width = random.randint(*width_range)
random_height = random.randint(*height_range)

# Create img_size tuple
img_size = (random_width, random_height)

batch_size = 50
num_classes = 6


train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode='categorical',
    shuffle=True
)

test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode='categorical',
    shuffle=False
)

num_classes = len(train_generator.class_indices)

model = Sequential()

model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(img_size[0], img_size[1], 3)))
model.add(MaxPooling2D((2, 2)))

model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))

model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))

model.add(Flatten())

# Adjust the number of units in the Dense layer
model.add(Dense(256, activation='relu'))

# Output layer with the correct number of classes
model.add(Dense(num_classes, activation='softmax'))

model.compile(optimizer=Adam(lr=0.001), loss='categorical_crossentropy', metrics=['accuracy'])

epochs = 10
history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // batch_size,
    epochs=epochs,
    validation_data=test_generator,
    validation_steps=test_generator.samples // batch_size
)

test_loss, test_acc = model.evaluate(test_generator)
print(f'Test Accuracy: {test_acc}')

priority_list = ['High', 'Medium', 'Low']

recognized_item = 'Medium'

if recognized_item in priority_list:
    bid_amount = 100
else:
    bid_amount = 50

from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
import pandas as pd

bidding_results = pd.DataFrame({
    'Team Name': [team_name],
    'Item Name': [recognized_item],
    'Bid': [bid_amount],
    'Bid Time': ['Current Time'],
})

wb = Workbook()
ws = wb.active

headers = ['Team Name', 'Item Name', 'Bid', 'Bid Time']
ws.append(headers)

for row in dataframe_to_rows(bidding_results, index=False, header=False):
    ws.append(row)

wb.save("/content/drive/MyDrive/BiddingResults.xlsx")


from openpyxl import load_workbook

loaded_wb = load_workbook("/content/drive/MyDrive/BiddingResults.xlsx")
loaded_ws = loaded_wb.active

highest_bid_row = max(loaded_ws.iter_rows(min_row=2, max_col=4, values_only=True), key=lambda row: row[2])

# Check if the tuple has at least 4 elements before accessing them
if len(highest_bid_row) >= 4:
    extracted_data = {'Team Name': highest_bid_row[0], 'Item Name': highest_bid_row[1], 'Bid': highest_bid_row[2], 'Bid Time': highest_bid_row[3]}
    
    if team_name == extracted_data['Team Name']:
        budget -= extracted_data['Bid']
else:
    # Handle the case where the tuple doesn't have enough elements
    print("Error: Not enough elements in highest_bid_row.")
